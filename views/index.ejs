<!DOCTYPE html>
<html>
  <head>
    <meta charset="utf-8">
    <title><%= title %></title>
    <link rel="stylesheet" href="/stylesheets/brain-maintain.css">
  </head>
  <body>
    <div id="ph-app" class="brain-maintain"></div>

    <!-- Lib -->
    <script src="/javascripts/lib/jquery-1.7.2.js"></script>
    <script src="/javascripts/lib/underscore-1.3.3.js"></script>
    <script src="/javascripts/lib/backbone-0.9.2.js"></script>
    <script src="/javascripts/lib/handlebars.runtime-1.0.0.beta.6.js"></script>
    <script src="/socket.io/socket.io.js"></script>

    <!-- Templates -->
    <script src="/javascripts/templates.js"></script>

    <!-- Namespace -->
    <script>
      window.bm = {};

      bm.models = {};
      bm.collections = {};
      bm.views = {};
    </script>

    <!-- App -->
    <script>
      $(function() {
        // Socket Connection
        window.socket = io.connect('http://<%= host %>');

        // Models and Collections
        bm.models.question = Backbone.Model.extend({
          idAttribute: '_id'
        });

        bm.collections.users = Backbone.Collection.extend();

        // Views
        bm.views.layout = Backbone.View.extend({
          tagName: 'div',
          className: 'brain-maintain',

          events: {
            'submit #js-question-form': 'submitQuestion'
          },

          initialize: function() {
            this.currentUser = this.options.currentUser;
            this.users = this.options.users;
            this.question = this.options.question;
            this.message = this.options.message;

            this.template = Handlebars.templates.layout;

            this.users.on('reset', this.updateUsers, this);
            this.question.on('change', this.updateQuestion, this);
          },

          render: function() {
            $(this.el).html(this.template({
              currentUser: this.currentUser,
              users: this.users.toJSON(),
              question: this.question.toJSON(),
              message: this.message
            }));

            _.defer(function(){
              this.$('#js-answer-field').focus();
            });

            return this;
          },

          submitQuestion: function(event) {
            event.preventDefault();

            var answer = this.$('#js-answer-field').val();

            if($.trim(answer.length > 0)) {
              this.$('#js-answer-field').val('');

              socket.emit('answerquestion', answer, this.question.id);
            }
          },

          updateQuestion: function() {
            this.$('#ph-question-text').text(this.question.get('text'));

            this.$('#js-answer-field').val('');
          },

          updateUsers: function() {
            this.$('#ph-users').empty();

            this.users.each(function(user, index) {
              this.$('#ph-users').append('<li id="js-user-' + user.id + '"><span class="js-user user">' + user.get('username') + '</span> / <span class="js-points points">' + user.get('points') + '</span></li>');
            });
          }
        });

        // Socket Events
        socket.emit('userjoin', '<%= username %>', '<%= userId %>', '<%= userPoints %>');

        socket.on('startgame', function(question, users, username, message) {
          window.Users = new bm.collections.users(users);
          window.Question = new bm.models.question(question);

          var gameView = new bm.views.layout({
            currentUser: username,
            users: window.Users,
            question: window.Question,
            message: message
          });

          setView(gameView);
        });

        socket.on('updateusers', function(users) {
          window.Users.reset(users);
        });

        socket.on('addpoints', function(userId, score, message) {
          $('#js-user-' + userId)
            .find('.js-points')
            .text(score);

          setMessage(message);
        });

        socket.on('incorrectanswer', function(message) {
          setMessage(message);
        });

        socket.on('updatequestion', function(question) {
          window.Question.set(question);
        });

        function setMessage(message) {
          $('#ph-message')
            .html(message);
        }

        function setView(view) {
          $('#ph-app')
            .empty()
            .append(view.render().el);
        }
      });
    </script>
  </body>
</html>